import type { NextApiRequest, NextApiResponse } from 'next';
import { sendPasswordResetEmail } from 'firebase/auth';
import { auth } from '@/lib/firebase';

interface ResetPasswordRequestBody {
  email: string;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    console.warn('‚ö†Ô∏è M√©todo no permitido:', req.method);
    return res.status(405).json({ message: 'M√©todo no permitido' });
  }

  try {
    console.log('üîπ Nueva petici√≥n a /api/reset-password');

    // üîπ Validar que el email est√° presente en la solicitud
    const { email }: ResetPasswordRequestBody = req.body;
    if (!email || typeof email !== 'string') {
      console.warn('‚ö†Ô∏è El correo electr√≥nico es requerido.');
      return res
        .status(400)
        .json({ message: 'El correo electr√≥nico es requerido' });
    }

    console.log(
      `üîπ Enviando enlace de restablecimiento de contrase√±a a: ${email}`
    );

    // üîπ Enviar email de restablecimiento de contrase√±a
    await sendPasswordResetEmail(auth, email);

    console.log(
      '‚úÖ Enlace de restablecimiento de contrase√±a enviado con √©xito.'
    );
    return res.status(200).json({
      message: `Se ha enviado un enlace de restablecimiento de contrase√±a a ${email}.`,
    });
  } catch (error: any) {
    console.error(
      '‚ùå Error enviando correo de restablecimiento de contrase√±a:',
      error
    );

    let errorMessage =
      'Error al enviar el correo de restablecimiento de contrase√±a.';

    if (error.code === 'auth/user-not-found') {
      errorMessage = 'No existe una cuenta con ese correo electr√≥nico.';
    } else if (error.code === 'auth/invalid-email') {
      errorMessage = 'El correo electr√≥nico proporcionado no es v√°lido.';
    }

    return res.status(500).json({ message: errorMessage });
  }
}
